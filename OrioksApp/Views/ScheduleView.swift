import SwiftUI

struct ScheduleView: View {
    @EnvironmentObject var viewModel: OrioksViewModel
    
    var body: some View {
        NavigationView {
            Group {
//                if let schedule = viewModel.schedule {
//                    // –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –≤—ã–±–∏—Ä–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–µ–¥–µ–ª–∏ —Å –∫–ª—é—á–æ–º "0"
//                    if let weekSchedule = schedule.weeks["1"] {
//                        List {
//                            ForEach(weekSchedule.keys.sorted(), id: \.self) { day in
//                                if let pairs = weekSchedule[day] {
//                                    Section(header: Text(day.capitalized)) {
//                                        ForEach(pairs.keys.sorted(), id: \.self) { pairNumber in
//                                            if let classInfo = pairs[pairNumber] {
//                                                HStack {
//                                                    VStack(alignment: .leading, spacing: 4) {
//                                                        Text("–ü–∞—Ä–∞ \(pairNumber)")
//                                                            .font(.subheadline)
//                                                            .foregroundColor(.gray)
//                                                        Text(classInfo.name)
//                                                            .font(.headline)
//                                                        Text("–ö–∞–±–∏–Ω–µ—Ç: \(classInfo.classroom)")
//                                                            .font(.subheadline)
//                                                            .foregroundColor(.secondary)
//                                                        Text("–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: \(classInfo.teacher)")
//                                                            .font(.subheadline)
//                                                            .foregroundColor(.secondary)
//                                                    }
//                                                    Spacer()
//                                                    VStack {
//                                                        Text("00:00")
//                                                            .font(.caption)
//                                                        Rectangle()
//                                                            .fill(Color.green)
//                                                            .frame(width: 4, height: 50)
//                                                        Text("00:00")
//                                                            .font(.caption)
//                                                    }
//                                                }
//                                                .padding(.vertical, 8)
//                                            }
//                                        }
//                                    }
//                                }
//                            }
//                        }
                if let schedule = viewModel.schedule {
                    // –Ω–µ–¥–µ–ª—è (0...3)
                    if let weekSchedule = schedule.weeks["1"] {
                        List {
                            ForEach(weekSchedule.keys.sorted(), id: \.self) { day in
                                if let pairs = weekSchedule[day] {
                                    Section(header: Text(day.capitalized)) {
                                        ForEach(pairs.keys.sorted(), id: \.self) { pairNumber in
                                            if let classInfo = pairs[pairNumber] {
                                                HStack {
                                                    VStack(alignment: .leading, spacing: 4) {
                                                        Text("–ü–∞—Ä–∞ \(pairNumber)")
                                                            .font(.subheadline)
                                                            .foregroundColor(.gray)
                                                        Text(classInfo.name)
                                                            .font(.headline)
                                                        Text("–ö–∞–±–∏–Ω–µ—Ç: \(classInfo.classroom)")
                                                            .font(.subheadline)
                                                            .foregroundColor(.secondary)
                                                        Text("–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: \(classInfo.teacher)")
                                                            .font(.subheadline)
                                                            .foregroundColor(.secondary)
                                                    }
                                                    Spacer()
                                                    // –ó–¥–µ—Å—å –≤–º–µ—Å—Ç–æ –∑–∞–≥–ª—É—à–∫–∏ –≤—ã–≤–æ–¥–∏–º —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ timetable
                                                    if let times = viewModel.timetable?[pairNumber], times.count == 2 {
                                                        VStack {
                                                            Text(times[0])
                                                                .font(.caption)
                                                            Rectangle()
                                                                .fill(Color.green)
                                                                .frame(width: 4, height: 50)
                                                            Text(times[1])
                                                                .font(.caption)
                                                        }
                                                    } else {
                                                        // –ï—Å–ª–∏ –¥–ª—è –¥–∞–Ω–Ω–æ–π –ø–∞—Ä—ã –≤—Ä–µ–º—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ ‚Äì –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
                                                        VStack {
                                                            Text("--")
                                                                .font(.caption)
                                                            Rectangle()
                                                                .fill(Color.green)
                                                                .frame(width: 4, height: 50)
                                                            Text("--")
                                                                .font(.caption)
                                                        }
                                                    }
                                                }
                                                .padding(.vertical, 8)
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    } else {
                        Text("–û–†–ò–û–ö–° –µ—â–µ –Ω–µ –≤—ã–ª–æ–∂–∏–ª–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è —Å—Ç–æ—Ä–æ–Ω–Ω–∏—Ö —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ ü´†")
                    }
                } else {
                    VStack {
                        Spacer()
                        ProgressView("–ó–∞–≥—Ä—É–∑–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è...")
                        Spacer()
                    }
                }
            }
            .navigationTitle("–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ")
            .toolbar {
                ToolbarItem(placement: .navigationBarTrailing) {
                    Button(action: {
                        viewModel.fetchSchedule()
                    }) {
                        Image(systemName: "arrow.clockwise")
                    }
                }
            }
        }
    }
}

struct ScheduleView_Previews: PreviewProvider {
    static var previews: some View {
        ScheduleView()
            .environmentObject(OrioksViewModel())
    }
}
